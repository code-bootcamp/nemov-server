# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  email: Email!
  phone: Phone!
  veganLevel: Int
  zipCode: ZipCode
  address: String
  addressDetail: String
  bln: BusinessLicenseNumber
  role: ROLE_TYPE!
  point: Int!
}

"""이메일 형식: @가 포함되어있어야함."""
scalar Email

"""일반적인 핸드폰 번호 형식을 적용. 번호 사이에 -가 들어감"""
scalar Phone

"""우편번호"""
scalar ZipCode

"""사업자등록번호형식: (101~999)-(01~99)-(0001~9999)(0~9)"""
scalar BusinessLicenseNumber

"""유저 역할에 대한 타입"""
enum ROLE_TYPE {
  """구매자(일반 유저)"""
  BUYER

  """판매자"""
  SELLER
}

type ProductCategory {
  id: ID!
  name: String!
  image: String!
}

type ProductOption {
  id: ID!
  option6: String!
  option7: String!
  option8: String!
  option9: String!
  option10: String!
  option11: String!
}

type Review {
  id: ID!
  title: String!
  contents: String!
  rating: Int!
  product: Product!
  user: User!
  images: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProductOrder {
  id: ID!
  amount: Int!
  quantity: Int!
  status: PRODUCT_ORDER_STATUS_ENUM!
  buyer: User!
  seller: User!
  product: Product!
  review: Review
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""상품 구매에 대한 타입"""
enum PRODUCT_ORDER_STATUS_ENUM {
  """상품 구매 완료"""
  BOUGHT

  """상품 취소 완료"""
  REFUNDED
}

type Product {
  id: ID!

  """상품명"""
  name: String!
  description: String!
  image: String!
  veganLevel: Int
  price: Int!
  discountRate: Int!

  """상품 할인가"""
  discountedPrice: Int!
  quantity: Int!
  isOutOfStock: Boolean!
  option1: String!
  option2: String!
  option3: String!
  option4: String!
  option5: String!

  """뷰티 상품에 해당하는 추가 필수 표기 정보"""
  productOption: ProductOption

  """상품 카테고리"""
  productCategory: ProductCategory!

  """판매자"""
  user: User!

  """상품 생성날짜"""
  createdAt: DateTime!

  """상품 수정 날짜"""
  updatedAt: DateTime!
}

type Question {
  id: ID!
  title: String!
  contents: String!
  product: Product!
  user: User!
  answer: Answer
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Answer {
  id: ID!
  contents: String!
  question: Question
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Point {
  id: ID!
  impUid: ID
  amount: Int!
  status: POINT_TRANSACTION_STATUS_ENUM!
  balance: Int!
  user: User!
  createdAt: DateTime!
}

"""결제 상태에 대한 타입"""
enum POINT_TRANSACTION_STATUS_ENUM {
  """포인트 결제 완료"""
  PAID

  """포인트 환불 완료"""
  CANCELLED

  """상품 구매 완료"""
  BOUGHT

  """상품 구매 취소 완료"""
  REFUNDED

  """상품 판매 완료"""
  SOLD

  """상품 판매 취소 완료"""
  COLLECTED
}

type CartOutput {
  product: Product!

  """장바구니에 담긴 상품 수량"""
  count: Int!
}

type Query {
  fetchLoginUser: User!
  fetchUserPoint: Int!
  fetchProducts(productCategoryId: ID!, veganLevel: Int!, page: Int!): [Product!]!
  fetchProductsCount(productCategoryId: ID!, veganLevel: Int!): Int!
  fetchProduct(productId: ID!): Product!
  fetchProductsBySeller(page: Int!): [Product!]!
  fetchProductsCountBySeller: Int!
  fetchProductsOfRecommend: [Product!]!
  fetchProductsOfBestSelling: [Product!]!
  fetchReviewsByProduct(productId: ID!, page: Int!): [Review!]!
  fetchReviewsCountByProduct(productId: ID!): Int!
  fetchReviewsByBuyer(page: Int!): [Review!]!
  fetchReviewsCountByBuyer: Int!
  fetchReview(reviewId: ID!): Review!
  fetchQuestionsByProduct(productId: ID!, page: Int!): [Question!]!
  fetchQuestionsCountByProduct(productId: ID!): Int!
  fetchQuestionsByBuyer(page: Int!): [Question!]!
  fetchQuestionsCountByBuyer: Int!
  fetchQuestionsBySeller(page: Int!): [Question!]!
  fetchQuestionsCountBySeller: Int!
  fetchQuestion(questionId: ID!): Question!
  fetchPointTransactions(startDate: DateTime, endDate: DateTime, page: Int!): [Point!]!
  fetchPointTransactionsCount(startDate: DateTime, endDate: DateTime): Int!
  fetchCart: [CartOutput!]!
  fetchCartCount: Int!
  fetchIsInCart(productId: ID!): Boolean!
  fetchProductsIPicked(page: Int!): [Product!]!
  fetchProductsIPickedCount: Int!
  fetchIsPicked(productId: ID!): Boolean!
  fetchPickCountOfProduct(productId: ID!): Int!
  fetchProductOrdersByBuyer(startDate: DateTime, endDate: DateTime, page: Int!): [ProductOrder!]!
  fetchProductOrdersCountByBuyer(startDate: DateTime, endDate: DateTime): Int!
  fetchProductOrdersCountOfBought: Int!
  fetchProductOrdersBySeller(startDate: DateTime, endDate: DateTime, page: Int!): [ProductOrder!]!
  fetchProductOrdersCountBySeller(startDate: DateTime, endDate: DateTime): Int!
  fetchProductOrdersWithoutReview(page: Int!): [ProductOrder!]!
  fetchProductOrdersCountWithoutReview: Int!
  fetchAnswer(answerId: ID!): Answer!
  fetchAnswerByQuestion(questionId: ID!): Answer!
  fetchProductCategories: [ProductCategory!]!
}

type Mutation {
  uploadFile(file: Upload!): String!
  uploadFile1(file: Upload!): String!
  login(email: Email!, password: Password!): String!
  restoreAccessToken: String!
  logout: String!
  findEmail(name: String!, phone: Phone!): Email!
  findPassword(email: Email!, password: Password!): Boolean!
  checkBusinessLicenseNumber(bln: BusinessLicenseNumber!): Boolean!
  checkEmailExist(email: Email!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  checkUserPassword(password: Password!): Boolean!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserPassword(password: Password!): User!
  deleteLoginUser: Boolean!
  restoreUser(email: Email!): Boolean!
  createProduct(createProductInput: CreateProductInput!, createProductOptionInput: CreateProductOptionInput): Product!
  updateProduct(productId: ID!, updateProductInput: UpdateProductInput!, updateProductOptionInput: UpdateProductOptionInput): Product!
  deleteProduct(productId: ID!): Boolean!
  getTokenForSignUp(phone: Phone!): String!
  getTokenForEmail(phone: Phone!): String!
  getTokenForPassword(phone: Phone!): String!
  checkValidTokenForSignUp(phone: Phone!, token: String!): Boolean!
  checkValidTokenForEmail(phone: Phone!, token: String!): Boolean!
  checkValidTokenForPassword(phone: Phone!, token: String!): Boolean!
  createReview(productOrderId: ID!, createReviewInput: CreateReviewInput!): Review!
  updateReview(updateReviewInput: UpdateReviewInput!, reviewId: ID!): Review!
  deleteReview(reviewId: String!): Boolean!
  createQuestion(createQuestionInput: CreateQuestionInput!, productId: String!): Question!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!, questionId: ID!): Question!
  deleteQuestion(questionId: String!): Boolean!
  createPointCharge(
    """포인트 결제를 진행한 imp 결제번호"""
    impUid: ID!

    """포인트 충전 금액"""
    amount: Int!
  ): Point!
  cancelPointCharge(impUid: ID!): Point!
  toggleProductToCart(productId: ID!, count: Int): Boolean!
  toggleProductPick(productId: ID!): Boolean!
  createProductOrders(
    productOrders: [CreateProductOrderInput!]!

    """총 구매 금액"""
    amount: Int!
  ): String!
  cancelProductOrder(productOrderId: ID!): Boolean!
  createAnswer(questionId: ID!, contents: String!): Answer!
  updateAnswer(answerId: ID!, contents: String!): Answer!
  deleteAnswer(answerId: ID!): Boolean!
  createProductCategory(createProductCategoryInput: CreateProductCategoryInput!): ProductCategory!
  updateProductCategory(productCategoryId: ID!, updateProductCategoryInput: UpdateProductCategoryInput!): ProductCategory!
  deleteProductCategory(productId: ID!): Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""비밀번호 형식: 알파벳 대,소문자, 숫자, 특수기호(!@#$%^&*?) 각 1개씩 포함, (최소: 8글자, 최대 16글자)"""
scalar Password

input CreateUserInput {
  name: String!
  email: Email!
  password: Password!
  phone: Phone!
  veganLevel: Int
  zipCode: ZipCode
  address: String
  addressDetail: String
  bln: BusinessLicenseNumber
}

input UpdateUserInput {
  name: String
  veganLevel: Int
  zipCode: ZipCode
  address: String
  addressDetail: String
}

input CreateProductInput {
  """상품명"""
  name: String!

  """상품 카테고리에 해당하는 ID"""
  productCategoryId: ID!

  """상품 상세설명 (최대 2000자)"""
  description: String!

  """상품 대표 이미지에 해당하는 url"""
  image: String!

  """비건 레벨에 해당하는 숫자, 1: 플레시테리언 ~ 7: 비건"""
  veganLevel: Int!

  """상품 원가"""
  price: Int!

  """상품 할인율, 0 ~ 100"""
  discountRate: Int!

  """상품 재고 수량"""
  quantity: Int!

  """품명 및 모델명"""
  option1: String!

  """제조국(원산지)"""
  option2: String!

  """인증/허가 사항"""
  option3: String!

  """제조사(수입자)"""
  option4: String!

  """소비자 상담 관련 전화번호"""
  option5: String!
}

input CreateProductOptionInput {
  option6: String!
  option7: String!
  option8: String!
  option9: String!
  option10: String!
  option11: String!
}

input UpdateProductInput {
  """상품명"""
  name: String

  """상품 상세설명 (최대 2000자)"""
  description: String

  """상품 대표 이미지에 해당하는 url"""
  image: String

  """비건 레벨에 해당하는 숫자, 1: 플레시테리언 ~ 7: 비건"""
  veganLevel: Int

  """상품 원가"""
  price: Int

  """상품 할인율, 0 ~ 100"""
  discountRate: Int

  """상품 재고 수량"""
  quantity: Int

  """품명 및 모델명"""
  option1: String

  """제조국(원산지)"""
  option2: String

  """인증/허가 사항"""
  option3: String

  """제조사(수입자)"""
  option4: String

  """소비자 상담 관련 전화번호"""
  option5: String
}

input UpdateProductOptionInput {
  option6: String
  option7: String
  option8: String
  option9: String
  option10: String
  option11: String
}

input CreateReviewInput {
  title: String!
  contents: String!
  rating: Int!
  images: [String]
}

input UpdateReviewInput {
  title: String
  contents: String
  rating: Int
  images: [String]
}

input CreateQuestionInput {
  title: String!
  contents: String!
}

input UpdateQuestionInput {
  title: String
  contents: String
}

input CreateProductOrderInput {
  productId: ID!
  quantity: Int!
}

input CreateProductCategoryInput {
  name: String!
  image: String!
}

input UpdateProductCategoryInput {
  name: String
  image: String
}